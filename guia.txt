install laravel

composer create-project --prefer-dist laravel/laravel mensajes
composer create-project --prefer-dist laravel/laravel sim6

php artisan key:generate


ojo vagrant


git init
git add -A 
git commit -m "Inicio Comit"

creamos repositorio

git remote add origin https://github.com/marcosVisualnt/mensajes.git

git push origin master -f




auth laravel
_________________

composer require laravel/ui --dev

php artisan ui vue --auth 


npm install

npm run dev

__________bootstrap vue

npm install vue bootstrap-vue bootstrap


app.js
_________________
https://www.itechempires.com/2019/09/configure-bootstrap-vue-react-in-laravel-6-with-frontend-scaffolding/
php artisan ui bootstrap

npm install && npm run dev


https://laravel.com/docs/6.x/frontend
composer require laravel/ui --dev
CD ..

php artisan ui bootstrap --auth
php artisan ui vue --auth
php artisan ui react --auth

php artisan ui:auth


INSTALANDO bootstrap-vue
__________________________________________
https://bootstrap-vue.js.org/docs
https://webpack.js.org/guides/asset-management/#loading-css


ojo en bootstrap.js 
@import 'node_modules/bootstrap/scss/bootstrap';
@import 'node_modules/bootstrap-vue/src/index.scss';

https://bootstrap-vue.js.org/docs/components/alert
impportar componet alert

en resources/view/auth/login.blade.php


quitamos el css de app.blade.php


en login.blade  cambiamos continer por b-container y b-row 
b-containers


en app.blade cambiamos a componentes vue




clase 10
....................

git add -add
git commit -m "logiin ...2"
git push origin master

    pon clave y container


mysql -u root -p 

arranco xampp
creo db  mensajes2


cambio en appserviceprovider

    Schema::defaultStringLength(191);





php artisan migrate --seed

php artisan make:seeder UsersTableSeeder
config .env



metodo logout  .. app.js



clase 14 
componentes

contacto representa los items de la izuierda

lista contacto
activeConversation


MODELOS

php artisan make:seeder ConversationsTableSeeder

php artisan make:model Conversation -m

php artisan make:model Messages -m

php artisan make:seeder MessagesTableSeeder


ROUTES
no usamos web api , por los token .. 
no lo necesitamos ya que estamos en el mismo servidor o proyecto... no es necesario?? 
sistema de autentificacion basado en token.

CONTROLADORES
php artisan make:controller we
php artisan make:controller MessageController


php artisan migrate --seed


php artisan migrate:refresh --seed






seccion 6
COOKIES Y SESSIONS 

Peticion http no tiene estado , la cookies si ... por ejemplo dependiendo de la cookie se cambia la peticion ..
cookie -> guarda las preferencias del usuario.  navegador guarda a peticion del servidor.
esta cookie se envia siempre en cada peticion que realizamos..

SERVER SIDE SESSION

SESSIONS _ igual que cookie pero se guardan en lado del servidor ..

peticion - cookie - session - phpsessid -> cadena identificacion en ambas.. con post envia phpsessid 
sess_+phpsessid en servidor .. variables de session .. en session guardar id del usuario en la db..
las sessiones se destruyen .. config en php.ini session.save_path o custom session handlers
las sessiones se pueden guardar en tablas..


cookies disponibles para un solo dominio ...solo acceden 
ojo con api jwt jason web tokens .. porque las apis se usan en varios dominios 


10/01/20



<slot></slot>  comunica de componente padre  a componente hijo 
            o a traves de propiedades ej. right-align
            ej written-by-me="false"
props igual que slot .. para utilizar lo del padere en hijo.


usuario:
 dominios@visualnt.net -> 12345678
marcos y pedro
http://mensajes.vnt/api/messages




CLAS 26   AXIOS PETICION HTTP EN SEGUNDO PLANO

Lectura de informacion desde el componente
mounted()
    peticion http y en messages tenemos respuesta


CLAS 27 cCONSULTAR Y MOSTRAR TIPOS DE MENSAJES.

activeConversation  v-for en componente

messageController  , devolvemos lo que necesitemos
que mensajes nos han enviado y cual hemos recibido..
from_id , to_id

pasamos propiedad sin v-bind -> pasa como string..
si queremos que pase el valor 6 o false , hay que usar v-binc

http://mensajes.vnt/api/messages


CLAS 28 .. EVENTO SUBMIT ... REGISTRO DE MENSAJES
messageController store
activeConversation -> postCOntroller

boton enviar .. click o enter .. no click mejor submit.
subimt.prevent no recarga pagina ... 
v-model newMessage en input : '' , al escribir en input recibe auto valor 
y limpieamos valor al post 
recargamos en post getMessage

........................
mensajt button type ="submit" para que funcione al click..


CLASE 29  AUTOCOMPLETADO DE FORMULARIO  autocomplete=off

vue -> data 


git push origin master -f



CLA 30 NUEVO CONTACTO Y CONVERSACION

Con mas conversaciones hasta ahora no la api no esta preparada..
crear un usuario con dos conversaciones...

conversaciones parte iz...

seeder nuevo usuario juan
seeder nueva conversacion con usuario 3 ,ahora usuario 1 3 conversaciones...
crear conversaciones con reglas mas generales .. aÃ±adir contacto como amigo .. dos conversaciones .. una para cada lado...

seeder dos nuevos mensajes comunicamos usuario 1 con el tres 


php artisan migrate:refresh --seed
OJO ELIMINA INFO Y CREA TABLAS ...



cla 31 :  mensajes

MessageController   devolver solo los del contacto...

XHR EN NETWORK CHOME , vemos las peticiones realizadas...
creamos contactId en activeContro

CLA 32 OBTENER CONTACTOS DEL USUARIO QUE INICIA SESION ...

conversationController  
contactlistcomponetn  -> formulario busqueda y 3 contact-componet.
    cargamos un contactlist por cada conversacion
contact


clase 33 listar conversaciones
contaclist .. hacer v-for  ConversationsTableSeeder
contactComponent .. name , lasmessage lastime , como props 
    uno a uno o con un objeto...



    CLA 35 MODEL EVENT Y OBSERVERS
listamos converaciones de un usuario ..
last_message y last_tiem .. no tiene los valores correspondientes 
como se pueden actualizar ? por eventos..

cuando se registra que hay un nuevo mensaje .. actualizar .. 
no en controlador sino como evento OJO ..

Donde se registran mensajes ????  en store , seeder ... etc...
para evitar esto .. escuchamos eventos sobre un modelo determinado... 
OBSERVERS -> LARAVEL ..

php artisan make:observer MessageObserver --model=Message

cuando el mensaje se cree enviamos el ultimo mensaje...

para declarar el observer  hay que ir appserviceprovider en el boot.



CLA 38 
Creamos componente MessengerComponent.vue
va a contener listado de contactos como conversacion activeConversation

cogemos de home y lo llevamos a este nuevo componente.

creamos un evento .. y lo capturamos... 
v-on igual @
tenemos que enviar conversacion como parte del evento...
recibimos la data del evento ...  $event

cla 39 cargar mensajes segun seleccion
    eviamos de contact list la info a activeConversation

cla 40 OBSERVAR CAMBIOS SOBRE VARIABLES PROPS 

al hacer click izq no actualiza derecha..
observar cambios en contact_id ,, en activecomponente .. watch contactid(value
) , 









































