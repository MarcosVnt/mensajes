install laravel

composer create-project --prefer-dist laravel/laravel mensajes
composer create-project --prefer-dist laravel/laravel sim6

php artisan key:generate


ojo vagrant




git init
git add -A 
git commit -m "Inicio Comit"

creamos repositorio

git remote add origin https://github.com/marcosVisualnt/mensajes.git

git push origin master -f




auth laravel
_________________

composer require laravel/ui --dev

php artisan ui vue --auth 


npm install

npm run dev

__________bootstrap vue

npm install vue bootstrap-vue bootstrap


app.js
_________________
https://www.itechempires.com/2019/09/configure-bootstrap-vue-react-in-laravel-6-with-frontend-scaffolding/
php artisan ui bootstrap

npm install && npm run dev


https://laravel.com/docs/6.x/frontend
composer require laravel/ui --dev
CD ..

php artisan ui bootstrap --auth
php artisan ui vue --auth
php artisan ui react --auth

php artisan ui:auth


INSTALANDO bootstrap-vue
__________________________________________
https://bootstrap-vue.js.org/docs
https://webpack.js.org/guides/asset-management/#loading-css


ojo en bootstrap.js 
@import 'node_modules/bootstrap/scss/bootstrap';
@import 'node_modules/bootstrap-vue/src/index.scss';

https://bootstrap-vue.js.org/docs/components/alert
impportar componet alert

en resources/view/auth/login.blade.php


quitamos el css de app.blade.php


en login.blade  cambiamos continer por b-container y b-row 
b-containers


en app.blade cambiamos a componentes vue




clase 10
....................

git add -add
git commit -m "logiin ...2"
git push origin master

    pon clave y container


mysql -u root -p 

arranco xampp
creo db  mensajes2


cambio en appserviceprovider

    Schema::defaultStringLength(191);





php artisan migrate --seed

php artisan make:seeder UsersTableSeeder
config .env



metodo logout  .. app.js



clase 14 
componentes

contacto representa los items de la izuierda

lista contacto
activeConversation


MODELOS

php artisan make:seeder ConversationsTableSeeder

php artisan make:model Conversation -m

php artisan make:model Messages -m

php artisan make:seeder MessagesTableSeeder


ROUTES
no usamos web api , por los token .. 
no lo necesitamos ya que estamos en el mismo servidor o proyecto... no es necesario?? 
sistema de autentificacion basado en token.

CONTROLADORES
php artisan make:controller we
php artisan make:controller MessageController


php artisan migrate --seed


php artisan migrate:refresh --seed






seccion 6
COOKIES Y SESSIONS 

Peticion http no tiene estado , la cookies si ... por ejemplo dependiendo de la cookie se cambia la peticion ..
cookie -> guarda las preferencias del usuario.  navegador guarda a peticion del servidor.
esta cookie se envia siempre en cada peticion que realizamos..

SERVER SIDE SESSION

SESSIONS _ igual que cookie pero se guardan en lado del servidor ..

peticion - cookie - session - phpsessid -> cadena identificacion en ambas.. con post envia phpsessid 
sess_+phpsessid en servidor .. variables de session .. en session guardar id del usuario en la db..
las sessiones se destruyen .. config en php.ini session.save_path o custom session handlers
las sessiones se pueden guardar en tablas..


cookies disponibles para un solo dominio ...solo acceden 
ojo con api jwt jason web tokens .. porque las apis se usan en varios dominios 


10/01/20



<slot></slot>  comunica de componente padre  a componente hijo 
            o a traves de propiedades ej. right-align
            ej written-by-me="false"
props igual que slot .. para utilizar lo del padere en hijo.


usuario:
 dominios@visualnt.net -> 12345678
marcos y pedro
http://mensajes.vnt/api/messages




CLAS 26   AXIOS PETICION HTTP EN SEGUNDO PLANO

Lectura de informacion desde el componente
mounted()
    peticion http y en messages tenemos respuesta


CLAS 27 cCONSULTAR Y MOSTRAR TIPOS DE MENSAJES.

activeConversation  v-for en componente

messageController  , devolvemos lo que necesitemos
que mensajes nos han enviado y cual hemos recibido..
from_id , to_id

pasamos propiedad sin v-bind -> pasa como string..
si queremos que pase el valor 6 o false , hay que usar v-binc

http://mensajes.vnt/api/messages


CLAS 28 .. EVENTO SUBMIT ... REGISTRO DE MENSAJES
messageController store
activeConversation -> postCOntroller

boton enviar .. click o enter .. no click mejor submit.
subimt.prevent no recarga pagina ... 
v-model newMessage en input : '' , al escribir en input recibe auto valor 
y limpieamos valor al post 
recargamos en post getMessage

........................
mensajt button type ="submit" para que funcione al click..


CLASE 29  AUTOCOMPLETADO DE FORMULARIO  autocomplete=off

vue -> data 


git push origin master -f



CLA 30 NUEVO CONTACTO Y CONVERSACION

Con mas conversaciones hasta ahora no la api no esta preparada..
crear un usuario con dos conversaciones...

conversaciones parte iz...

seeder nuevo usuario juan
seeder nueva conversacion con usuario 3 ,ahora usuario 1 3 conversaciones...
crear conversaciones con reglas mas generales .. añadir contacto como amigo .. dos conversaciones .. una para cada lado...

seeder dos nuevos mensajes comunicamos usuario 1 con el tres 


php artisan migrate:refresh --seed
OJO ELIMINA INFO Y CREA TABLAS ...



cla 31 :  mensajes

MessageController   devolver solo los del contacto...

XHR EN NETWORK CHOME , vemos las peticiones realizadas...
creamos contactId en activeContro

CLA 32 OBTENER CONTACTOS DEL USUARIO QUE INICIA SESION ...

conversationController  
contactlistcomponetn  -> formulario busqueda y 3 contact-componet.
    cargamos un contactlist por cada conversacion
contact


clase 33 listar conversaciones
contaclist .. hacer v-for  ConversationsTableSeeder
contactComponent .. name , lasmessage lastime , como props 
    uno a uno o con un objeto...



    CLA 35 MODEL EVENT Y OBSERVERS
listamos converaciones de un usuario ..
last_message y last_tiem .. no tiene los valores correspondientes 
como se pueden actualizar ? por eventos..

cuando se registra que hay un nuevo mensaje .. actualizar .. 
no en controlador sino como evento OJO ..

Donde se registran mensajes ????  en store , seeder ... etc...
para evitar esto .. escuchamos eventos sobre un modelo determinado... 
OBSERVERS -> LARAVEL ..

php artisan make:observer MessageObserver --model=Message

cuando el mensaje se cree enviamos el ultimo mensaje...

para declarar el observer  hay que ir appserviceprovider en el boot.



CLA 38 
Creamos componente MessengerComponent.vue
va a contener listado de contactos como conversacion activeConversation

cogemos de home y lo llevamos a este nuevo componente.

creamos un evento .. y lo capturamos... 
v-on igual @
tenemos que enviar conversacion como parte del evento...
recibimos la data del evento ...  $event

cla 39 cargar mensajes segun seleccion
    eviamos de contact list la info a activeConversation

cla 40 OBSERVAR CAMBIOS SOBRE VARIABLES PROPS 

al hacer click izq no actualiza derecha..
observar cambios en contact_id ,, en activecomponente .. watch contactid(value
) , 

git push origin master -f  cla 40


cla 41 , contactname en componente de la derecha

cla 42 : estado actual .. SIN REALTIME
antes -> consultar mensajes cada minuto...
ahora _> websocket aplicacion abierta entre cliente y servidor ... para no consutlar continuamente

realtime conversacion : para que el usuario reciba el mensaje rapidamente..
pusher y eventos de laravel..

cla43 ->config/ broadcasting.php  
broadcasting -> propagar eventos  desde servidor a cliente varios driver, psuher redis, etc

pusher -> evita configurar servidor  marcos.visualnt   Pusher_654*

nuevo canal messenger-laravel
cogemos la klave
app_id = "932188"
key = "c84c3bb2c4b0daafff00"
secret = "8313866883277d092c83"
cluster = "eu"

ponemos en .env estas claves
pusher servicio 
laravel eco biblioteca escuchar...

añadimos dependencia

composer require pusher/pusher-php-server "~4.0"


CLA 44  LARAVEL ECHO Y Pusher

instalamos dependencias

npm install --save laravel-echo pusher-js

abrimos bootstrap.js
descomentamos 
control + } desmoenta ..
completamos 
 key: 'c84c3bb2c4b0daafff00',
 cluster: 'us2',




cla 45 -- registrar eventos y broadcast de ellos .. comunicar eventos a traves de canaes de comunicacion.

registrar service provider
        App\Providers\BroadcastServiceProvider::class,


defining broadcast eventos
broadcaston -> 

crear evento 
php artisan make:event MessageSent

app events -> 
broadcaston

para ser comunicado por puser implements ShouldBroadcast

nombre canal... 

chanel publicaco , prvate y presence son privados .. es necesario quien puede subscribirse a estos canales..

1 emitir evento a traves del cana broadcaston
-------------------------------------------------------
en messageObserver podriamos dispar evento  con 

import App\Events\MessageSent;

event(new MessageSent($message));

para poder recibir esta info message lo añadimos en el contrcutro de la clase MessageSent
lo hacemos para que todos los atributos publicos son eviados por el canal .. 
de esta forma envia el objeto message...
-------------
lanza evento y este sera comunicado a traves de los canales mediante queued.job 
cola de trabajo ....es importante .. 

46 QUEUE JOB , COLAS DE TRABAJO.
resultan utilies para no colapsar el servidor...

un evento puede realizar cualquier cosa.. y puede ser respondido

registro , envia email .. mailgun .. envio de correos for developer
api envio tarda 1 o 2 seg.. primero entra y despues envia email...
un evento fue lanzado y fue encoladoo....

uso de colas para tareas pesadas , para que el servidor atienda en momento posterior.

PRINCIPIO DE COLAS...

CONFIG/queue.php

driver para gestionar colas .. 
archivo .env  queue_driver=sync  , en el instante ..

lo mas adecuado database .. se guardan las tareas ....

laravel.log ... ojo ver resgistro cuando problemas o ....
BROADCAST_DRIVER = Pusher


cla 47 ESCUCHAR EVENTOS usando laravel echo

asincrona ...sync

BROADCAST_DRIVER = Pusher

listening for eventes .. 
metodo chanel para instanciar al canal
metod listnen para escuchar el evento ..
podemos escuchar varios eventos par aun solo canal ...

instanciar laravel echo .. es instanciar de  bootstrap  laravel eco..

en que componente .. en el mas generico MessengerComponent..

en mounted

Echo.channel('orders')
    .listen('OrderShipped', (e) => {
        console.log(e.order.name);
    });

    ojo si el canal es privado...


cla 48 


mostrar mensaje recibido ..
obterner mensajes canal pusher.
desde messengerComponen lo recibimos en el mounted
y lo pasamos al componente...

 
hijo a padre -- eventos

de padre a hijo PROPS

el mensaje se recibe .. pasar a un hijo .. 
mediante propiedad geneerarl para que el componente reciba arreglo mensages
hacemos push sobre arreglo para añadir mensaje
y enviar este a active conversation component  ... 

lo quitamos de la data y lo ponemos a props...
ojo a cambios por ello..
getMessages pide al servidor .. pero ahora no forma de data .. vien del exterior..

pasar consultas al componente messenger.. 

el watch : no lo necesitamos de activecomponent...
escuchaba cambios de una propiedad externa...

en messengercomponent hacemos las peticiones... 
cada vez que se selecciona una conversacion llammaos a getmessenger...
el mensage recibido de laravel eco. lo enviamos mediante push a messenger...

ojo dengro de evento como esta en la cola puede ocurrir tiempo despues ,, y portanto no tenr 
session activa ...
no helper auth dentro de un evento .. 

comparamos 



48 : 
1 pasar mensaje de MC a AC  y formatear
padre a hijo : props 
hijo a padre : eventos ...
Enviamos messages como propiedad

antes ac gestionaba y pedia mensages ahora es MC  asi que refactorizamos...
ac -> getMeesaages  .. mover a  MC y qutiamos

 watch ..escucha cambios sobre una prop que se recibe de forma externa.

 de ac mounted quitamos 

 mc -> hacer peticiones .. se basa en contact_id no ahora selecterd
 ahora llamamos a getmessenger cuanod se activa una conversacion

 cuando recibimos de laravel-eco mensages tamiben lo llamamos.. 
 poero ojo hay que formatearlo ... ver mensageController..
 falta written_by_me

 MessageSent  - lo normal seria en el contrstructur hacer la modificacion .. 
 pero auth helper no lo tenemos...
comparamos quien envia con canal de pusshr y definimos si enviamos o recibimos...
en MC
                    message.written_by_me = (userId == message.from_id);


ahora tenemos que pasar a MC el id DESDE HOME.BLADE.php


CLA 49 DIVERSOS CANALES UNO PARA CADA CLIENTE ....







CLA 51 MAS DE UN CANAL

mensajeSent  
ahora : 
-se crea 1 mensaje en la db
-broadcast del evento
- laravel echo .. todos los usuarios son notivacods .. escuchan canal example.


evento a canal especifico..

messenger component : subscribirse a canal por ID...

en activeC creamos evento para informar de hijo a padre ..
en MessageController añadimos como respuesta el mensaje registrado...
asi en AC podmeos en postMessenger saber el mensaje...

Mesngcomponet padre recibe el evento .. lo escuchamos mediante @messageCreated
via addMessenger() lo procesamos ...
definimos addmessenger y recibimos un mensaje...
falta el atributo written_by_me.

añadimos mensaje al arreglo de mensajes ...

addmesage lo llamamos al guardar y emitir evento... y al recibir de laravel echo





mensaje no se muestra si no esta en la conversacion... 
estoy en conversacion con un usuario y recibo de otro . este mensaje no deberia 
mostrarse en la conversacion primera.. 
Pero si deberia acgtuallizar el ultimo mensaje recibido en panel izquierda.

en MessengerComponenent en addmessage

if(selectedConversation.contact_id == message.to_id){

}

cuando escribimos mensje nosotros no es necesario calcular wrritenb_by_me es true
cambiamos si recibiomo true , si enviamos false


CLA 53 LAST Message

recibimos sms a traves de canal ..
o recibimos sms si lo enviamos nosotros...


debemos mostrar sms si envia contacto con el que estamos conversando 
o si lo hemos enviado nostros al contacto con quien conversamos...


actulaizamos lado izquierdo .. CONTACT LIST component
hace peticion a la api...

pasamos las conversaciones a MESSENGERCOMPONET..
pasamos propiedead :conversations...

pasamaos getConversaciones a MessengerComponenent
y en MessengerComponenent lo enviamos al hijo como props

falta....


CLA 54 MOMENTS.JS fecha con formato....

4 CORREGISR FORMATO DE FECHAS....
SI han pasado dias .. que ponga ayer o hace dos dias...

npm install moment --save

cargar moment como dependencia
resources/assets/js/bootstrap o app.js

window.moment = require('moment');

en concactlistcomponet lo usamos... relative time 

moment("2018-06-13 17:50:30", "YYYY-MM-DD hh:mm:ss").locale('es').fromNow();



































































